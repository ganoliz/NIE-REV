===== Doporučení pro reverzní analýzu, dostupné nástroje =====

==== Doporučení ====

Jsou živě demonstrována na cvičení.

==== Nástroje dostupné zdarma ====

  * **API Monitor** - nástroj pro sledování API volání programu. Lze sledovat i jednotlivé funkce nebo jejich logické skupiny. [[http://www.rohitab.com]].
  * **CFF Explorer** - nástroj pro analýzu a úpravu PE souborů. [[http://www.ntcore.com/exsuite.php]].
  * **Dependency Walker** - nástroj pro analýzu především importních a exportních tabulek PE souborů. Podporuje jak statickou, tak dynamickou analýzu. [[http://www.dependencywalker.com/]].
  * **ExeInfoPE** - nástroj pro identifikaci kompilátoru použitého pro vytvoření PE souboru. [[http://www.exeinfo.xn.pl/]].
  * **HxD** - Hex editor s možností úpravy RAM a disku po sektorech. [[http://mh-nexus.de/en/hxd/]].
  * **IDA Pro 5.0 Free** - interaktivní disassembler pro reverzní inženýrství. Tato verze neobsahuje dekompilátor ani podporu pro x64, ale je zdarma! [[https://www.hex-rays.com/products/ida/support/download_freeware.shtml]].
  * **Process Explorer** - nástroj pro detailní monitorování procesů. Značně rozšířená verze Windows Task Manageru. [[https://technet.microsoft.com/cs-cz/sysinternals/bb896653.aspx]].
  * **Process Monitor** - nástroj pro monitorování chování procesu - přístupu k registrům, souborovému systému, atd. [[https://technet.microsoft.com/cs-cz/sysinternals/bb896645.aspx]].
  * **Regshot** - nástroj pro monitorování změn registrů. [[http://sourceforge.net/projects/regshot/]].
  * **Resource Hacker** - nástroj pro zkoumání a úpravy obsahu ''.rsrc'' sekce PE souborů. [[http://www.angusj.com/resourcehacker/]].
  * **Strings** - nástroj pro extrakci všeho, co se tváří jako textový řetězec. Vhodné pro prvotní analýzu. [[https://technet.microsoft.com/en-us/sysinternals/bb897439.aspx]].
  * **X64Dbg** - debugger pro 32 i 64bitové programy. [[http://x64dbg.com/]].

==== Komerční nástroje ====

  * **Hiew** - programátorský hex editor s disassemblerem (i x64) a funkcemi pro reverzní inženýrství. [[http://www.hiew.ru/]]
  * **IDA Pro** - interaktivní disassembler pro reverzní inženýrství. Rozsáhlá podpora architektur, pluginy atd. Dostupný je též dekompilační plugin Hexrays Decompiler pro převod kódu do C. Velmi drahý, ale velmi účinný. [[https://www.hex-rays.com]]

==== Další užitečné zdroje ====

  * **The Decompilation Wiki** - informace o dostupných dekompilátorech. [[http://www.program-transformation.org/Transform/DeCompilation]].

===== Zadání druhé úlohy =====

  * Počet bodů: **10**
  * Termín odevzdání: 
    * **8.12.2016, 19:30** (paralelka 101) 
    * **5.12.2016, 19:30** (paralelka 102)

Cílem této úlohy je provést reverzní inženýrství na souboru v 64bitové architektuře a zjistit, jaké zadat programu sériové číslo tak, aby byly splněny podmínky, které na něj program má. Tato úloha je složitější než předešlé dvě. Především protože: 

  * z DLL knihovny SerialNumber64.dll, kterou aplikace Code64.exe používá, jsou importovány symboly podle ordinálního čísla; 
  * obsahuje triviální ochranu proti ladění;
  * pro 64bitovou architekturu jsou hůře dostupné nástroje pro analýzu.

Díky ordinálním číslům u importů nebudete vědět jméno symbolů, které se z knihovny volají. Ve třetí úloze jsme však viděli, jakým způsobem lze získat adresy importovaných symbolů a nahradit je vlastními pro účely testování.

Úloha ke stažení zde: {{:labs:04:ukol2_v2.zip|}}.

Obsahem úplného řešení by měl být **velmi stručný** popis vašeho postupu, funkční sériové číslo, popis, jakým způsobem vzniká (tzn. jaké informace v něm jsou obsaženy a jak jsou zakódovány), a také zdrojový kód programu, který na základě uživatelem zadaných vstupů vygeneruje nové sériové číslo; program by měl být nastaven tak, aby implicitní hodnoty vygenerovaly číslo, které nijak neupravený kód z úlohy přijme.

<note tip>
**Nápověda**

Ověřování sériového čísla i jeho generování jsou poměrně složité a zahrnují použití několika funkcí z knihovny BCRYPT.DLL [[https://msdn.microsoft.com/en-us/library/windows/desktop/aa833130(v=vs.85).aspx|CNG Cryptographic Primitive Functions]]. Analyzujte kód ze souborů Code64.exe a/nebo SerialNumber64.dll, další použité moduly jsou standardní a jejich dokumentaci snadno naleznete. Nelekněte se, až zjistíte, co se z knihovny používá a k čemu. Vstup do sériového čísla je kratší než na první pohled vypadá.

Knihovna SerialNumber64.dll obsahuje i funkci pro generování sériového čísla. Najděte ji, zjistěte co chybí, doplňte to a použijte ji pro vygenerování sériového čísla, které bude platné nejméně do konce semestru. Implementovat vlastní generátor by samozřejmě bylo možné, ale neúměrně složité.
</note>